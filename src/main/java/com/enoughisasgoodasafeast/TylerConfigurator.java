package com.enoughisasgoodasafeast;
import ch.qos.logback.classic.Logger;
import ch.qos.logback.classic.LoggerContext;
import ch.qos.logback.classic.encoder.PatternLayoutEncoder;
import ch.qos.logback.classic.spi.Configurator;
import ch.qos.logback.classic.tyler.TylerConfiguratorBase;
import ch.qos.logback.core.Appender;
import ch.qos.logback.core.ConsoleAppender;
import java.lang.Override;

/*
 *
 * <p>This file was generated by logback-tyler version 1.0.0</p>
 *
 * <p>Eventual errors and warnings are appended at the end.</p>
 *
 * <p>You may experiment with logback.xml to Java translation, i.e.
 * TylerConfigurator generation, at the following URL:</p>
 *
 * <p>     https://logback.qos.ch/translator/services/xml2Java.html </p>
 *
 * <p>This generated TylerConfigurator class is intended to be copied and integrated
 * into the user's project as a custom configurator. It will configure logback
 * without XML. You are free to rename TylerConfigurator as you wish.</p>
 *
 * <p>It requires logback-classic version 1.5.11 or later at runtime.</p>
 *
 * <p>Custom configurators are looked up via Java's service-provide facility. If a
 * custom provider is found, it takes precedence over logback's own configurators,
 * e.g. DefaultJoranConfigurator.</p>
 *
 * <p>To install your custom configurator to your project, add a
 * provider-configuration file to the following path:</p>
 *
 * <pre>  META-INF/services/ch.qos.logback.classic.spi.Configurator</pre>
 *
 * <p>This provider-configuration file should contain a line with the fully
 * qualified class name of your tyler configurator.</p>
 *
 * <p>See also item 1 of 'Configuration at initialization' section at </p>
 *
 * <p>  https://logback.qos.ch/manual/configuration.html#auto_configuration</p>
 *
 * <p>With recent versions of logback and logback-tyler you can still
 * configure logger levels dynamically using properties files. Note that
 * configuration files in properties format can be watched for
 * changes. See the documentation on PropertiesConfigurator for more details.</p>
 *
 * <p>https://logback.qos.ch/manual/configuration.html#propertiesConfigurator</p>
 *
 * <p>Keep in mind that by integrating a .properties configuration file info
 * your tyler configurator, you can still change logger levels dynamically, without
 * redeploying your application.</p>
 *
 */

/**
 * NB: I had to make this class public for it to not throw a ServiceConfigurationError complaining about access.
 Per <a href="https://github.com/qos-ch/logback-tyler/discussions/5"/>, the generator has been fixed to mark the class public
 in version 1.0.1.
 Since the class is generated and outside our control, we've added the explicit SuppressWarnings annotation.
 We want to the keep compilation clean and clear of unknown warnings.
 */
@SuppressWarnings({"rawtypes", "unchecked"})
public class TylerConfigurator extends TylerConfiguratorBase implements Configurator {

    /**
     * <p>This method performs configuration per {@link Configurator} interface.</p>
     *
     * <p>If <code>TylerConfigurator</code> is installed as a configurator service, this
     * method will be called by logback-classic during initialization.</p>
     */

    @Override
    public Configurator.ExecutionStatus configure(LoggerContext loggerContext) {
        setContext(loggerContext);
        Appender appenderSTDOUT = setupAppenderSTDOUT();
        Logger logger_ROOT = setupLogger("ROOT", "INFO", null);
        logger_ROOT.addAppender(appenderSTDOUT);
        return ExecutionStatus.DO_NOT_INVOKE_NEXT_IF_ANY;
    }

    Appender setupAppenderSTDOUT() {
        ConsoleAppender appenderSTDOUT = new ConsoleAppender();
        appenderSTDOUT.setContext(context);
        appenderSTDOUT.setName("STDOUT");

        // Configure component of type PatternLayoutEncoder
        PatternLayoutEncoder patternLayoutEncoder = new PatternLayoutEncoder();
        patternLayoutEncoder.setContext(context);
//        patternLayoutEncoder.setPattern("%d{HH:mm:ss.SSS} foo");
        patternLayoutEncoder.setPattern("%date{ISO8601,America/New_York} %-5level [%X{INSTANCE_ID}] [%thread] %logger{36} - %msg %n");
        patternLayoutEncoder.setParent(appenderSTDOUT);
        patternLayoutEncoder.start();
        // Inject component of type PatternLayoutEncoder into parent
        appenderSTDOUT.setEncoder(patternLayoutEncoder);

        appenderSTDOUT.start();
        return appenderSTDOUT;
    }
}
// 14:54:13,184 |-INFO in ch.qos.logback.tyler.base.handler.ImplicitModelHandler - Assuming default type [ch.qos.logback.classic.encoder.PatternLayoutEncoder] for [encoder] property
// 14:54:13,184 |-INFO in ch.qos.logback.core.model.processor.DefaultProcessor@31441a4d - End of configuration.